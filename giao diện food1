{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPF/A5fKBAMo9bMlgzSWvKr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dongnguyennhathuy260206-lab/Huy_Dong/blob/main/giao%20di%E1%BB%87n%20food1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DyZ1NWrHg8Uj"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import np\n",
        "from keras.models import load_model\n",
        "import tkinter as tk\n",
        "from tkinter import ttk, filedialog, messagebox\n",
        "from PIL import Image, ImageTk\n",
        "import os\n",
        "\n",
        "# Load model nh·∫≠n di·ªán m√≥n ƒÉn\n",
        "model = load_model(\"food_detect.keras\")\n",
        "class_names = [\"pizza\", \"burger\", \"sushi\", \"noodles\", \"fried_chicken\"]\n",
        "\n",
        "# Th√¥ng tin m√≥n ƒÉn\n",
        "food_info = {\n",
        "    \"pizza\": [\n",
        "        \"Pizza l√† m√≥n ƒÉn n·ªïi ti·∫øng c√≥ ngu·ªìn g·ªëc t·ª´ √ù.\",\n",
        "        \"ƒê∆∞·ª£c l√†m t·ª´ b·ªôt m√¨, ph√¥ mai, s·ªët c√† chua v√† nhi·ªÅu lo·∫°i topping kh√°c nhau.\",\n",
        "        \"Pizza ng√†y nay ph·ªï bi·∫øn to√†n c·∫ßu v·ªõi nhi·ªÅu bi·∫øn th·ªÉ, t·ª´ pizza h·∫£i s·∫£n, pizza ph√¥ mai ƒë·∫øn pizza chay.\",\n",
        "        \"ƒê√¢y l√† m√≥n ƒÉn th∆∞·ªùng g·∫Øn li·ªÅn v·ªõi s·ª± sum h·ªçp gia ƒë√¨nh, b·∫°n b√®.\"\n",
        "    ],\n",
        "    \"burger\": [\n",
        "        \"Burger (b√°nh m√¨ k·∫πp th·ªãt) c√≥ ngu·ªìn g·ªëc t·ª´ ƒê·ª©c v√† M·ªπ.\",\n",
        "        \"Nguy√™n li·ªáu ch√≠nh th∆∞·ªùng g·ªìm: b√°nh m√¨, th·ªãt b√≤ n∆∞·ªõng, rau x√† l√°ch, c√† chua, ph√¥ mai v√† s·ªët.\",\n",
        "        \"Burger l√† m√≥n ƒÉn nhanh ph·ªï bi·∫øn nh·∫•t th·∫ø gi·ªõi, ƒë·∫∑c bi·ªát trong c√°c chu·ªói fast food.\",\n",
        "        \"Ngo√†i th·ªãt b√≤, burger c√≤n c√≥ nhi·ªÅu bi·∫øn th·ªÉ v·ªõi th·ªãt g√†, c√°, ho·∫∑c chay.\"\n",
        "    ],\n",
        "    \"sushi\": [\n",
        "        \"Sushi l√† m√≥n ƒÉn truy·ªÅn th·ªëng c·ªßa Nh·∫≠t B·∫£n.\",\n",
        "        \"Nguy√™n li·ªáu ch√≠nh l√† c∆°m tr·ªôn gi·∫•m k·∫øt h·ª£p v·ªõi h·∫£i s·∫£n t∆∞∆°i s·ªëng, rau c·ªß ho·∫∑c tr·ª©ng.\",\n",
        "        \"Sushi kh√¥ng ch·ªâ l√† m√≥n ƒÉn m√† c√≤n l√† ngh·ªá thu·∫≠t tr√¨nh b√†y tinh t·∫ø c·ªßa ·∫©m th·ª±c Nh·∫≠t.\",\n",
        "        \"C√°c lo·∫°i sushi ph·ªï bi·∫øn: Nigiri, Maki, Sashimi, Temaki.\"\n",
        "    ],\n",
        "    \"noodles\": [\n",
        "        \"Noodles (m√¨) l√† m√≥n ƒÉn ph·ªï bi·∫øn kh·∫Øp ch√¢u √Å.\",\n",
        "        \"C√≥ nhi·ªÅu lo·∫°i m√¨: m√¨ t∆∞∆°i, m√¨ kh√¥, m√¨ g√≥i, v·ªõi ƒëa d·∫°ng c√°ch ch·∫ø bi·∫øn nh∆∞ x√†o, n·∫•u, tr·ªôn.\",\n",
        "        \"M√¨ th∆∞·ªùng ƒÉn k√®m v·ªõi th·ªãt, h·∫£i s·∫£n, rau c·ªß v√† nhi·ªÅu lo·∫°i gia v·ªã kh√°c nhau.\",\n",
        "        \"·ªû Vi·ªát Nam, m√¨ g√≥i l√† m√≥n ƒÉn nhanh quen thu·ªôc, ti·ªán l·ª£i v√† ph·ªï bi·∫øn.\"\n",
        "    ],\n",
        "    \"fried_chicken\": [\n",
        "        \"Fried Chicken (g√† r√°n) l√† m√≥n ƒÉn n·ªïi ti·∫øng to√†n c·∫ßu, ƒë·∫∑c bi·ªát g·∫Øn li·ªÅn v·ªõi ·∫©m th·ª±c M·ªπ.\",\n",
        "        \"Th·ªãt g√† ƒë∆∞·ª£c t·∫©m b·ªôt, chi√™n gi√≤n, v√†ng ru·ªôm v√† c√≥ h∆∞∆°ng v·ªã h·∫•p d·∫´n.\",\n",
        "        \"G√† r√°n th∆∞·ªùng ƒÉn k√®m v·ªõi khoai t√¢y chi√™n, salad v√† n∆∞·ªõc ng·ªçt.\",\n",
        "        \"C√°c th∆∞∆°ng hi·ªáu g√† r√°n n·ªïi ti·∫øng: KFC, Popeyes, Lotteria.\"\n",
        "    ]\n",
        "}\n",
        "\n",
        "\n",
        "class FoodRecognitionUI:\n",
        "    def __init__(self, root):\n",
        "        self.root = root\n",
        "        self.root.title(\"·ª®ng d·ª•ng Nh·∫≠n Di·ªán M√≥n ƒÇn\")\n",
        "        self.root.geometry(\"1200x800\")\n",
        "        self.root.configure(bg=\"#f0f0f0\")\n",
        "\n",
        "        # Bi·∫øn l∆∞u tr·ªØ\n",
        "        self.image_path = None\n",
        "        self.cap = None\n",
        "        self.webcam_running = False\n",
        "        self.current_frame = None\n",
        "        self.photo = None\n",
        "        self.original_image = None\n",
        "        self.webcam_image = None\n",
        "        self.create_widgets()\n",
        "        self.start_webcam()\n",
        "\n",
        "    def create_widgets(self):\n",
        "        # Configure style\n",
        "        style = ttk.Style()\n",
        "        style.configure('TFrame', background='#f0f0f0')\n",
        "        style.configure('TLabel', background='#f0f0f0', font=('Arial', 10))\n",
        "style.configure('Title.TLabel', background='#f0f0f0', font=('Arial', 20, 'bold'), foreground='#2c3e50')\n",
        "        style.configure('Result.TLabel', background='#f0f0f0', font=('Arial', 18, 'bold'), foreground='#27ae60')\n",
        "        style.configure('TButton', font=('Arial', 12), padding=8)\n",
        "        style.configure('TLabelFrame', font=('Arial', 12, 'bold'), background='#f0f0f0')\n",
        "\n",
        "        # Main container\n",
        "        main_frame = ttk.Frame(self.root, padding=\"20\")\n",
        "        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n",
        "\n",
        "        # Title\n",
        "        title_label = ttk.Label(main_frame, text=\"H·ªÜ TH·ªêNG NH·∫¨N DI·ªÜN M√ìN ƒÇN\",\n",
        "                                style='Title.TLabel')\n",
        "        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))\n",
        "\n",
        "        # Left frame for controls and info\n",
        "        left_frame = ttk.Frame(main_frame)\n",
        "        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 20))\n",
        "\n",
        "        # Right frame for image/webcam\n",
        "        right_frame = ttk.Frame(main_frame)\n",
        "        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))\n",
        "\n",
        "        # Selection frame\n",
        "        select_frame = ttk.Frame(left_frame)\n",
        "        select_frame.grid(row=0, column=0, pady=(0, 20), sticky=(tk.W, tk.E))\n",
        "\n",
        "        # Select button\n",
        "        self.select_btn = ttk.Button(select_frame, text=\"üìÅ CH·ªåN ·∫¢NH V√Ä NH·∫¨N DI·ªÜN\",\n",
        "                                     command=self.select_and_recognize, width=25)\n",
        "        self.select_btn.grid(row=0, column=0, padx=(0, 10))\n",
        "\n",
        "        # Webcam button\n",
        "        self.webcam_btn = ttk.Button(select_frame, text=\"üì∑ B·∫¨T/T·∫ÆT WEBCAM\",\n",
        "                                     command=self.toggle_webcam, width=20)\n",
        "        self.webcam_btn.grid(row=0, column=1)\n",
        "\n",
        "        # Path label\n",
        "        self.path_label = ttk.Label(select_frame, text=\"Ch∆∞a ch·ªçn ·∫£nh n√†o\",\n",
        "                                    foreground=\"#7f8c8d\", font=('Arial', 11))\n",
        "        self.path_label.grid(row=1, column=0, columnspan=2, pady=(10, 0), sticky=tk.W)\n",
        "\n",
        "        # Result frame\n",
        "        result_frame = ttk.LabelFrame(left_frame, text=\"K·∫æT QU·∫¢ NH·∫¨N DI·ªÜN\", padding=\"15\")\n",
        "        result_frame.grid(row=1, column=0, pady=(0, 20), sticky=(tk.W, tk.E))\n",
        "\n",
        "        # Result display - centered and larger\n",
        "        self.result_var = tk.StringVar(value=\"üîÑ Ch∆∞a c√≥ k·∫øt qu·∫£\")\n",
        "        result_display = tk.Label(result_frame, textvariable=self.result_var,\n",
        "                                  font=('Arial', 18, 'bold'), foreground=\"#2c3e50\",\n",
        "                                  background='#ecf0f1', justify=tk.CENTER,\n",
        "                                  wraplength=400, padx=20, pady=20,\n",
        "                                  relief=tk.RIDGE, borderwidth=2)\n",
        "        result_display.grid(row=0, column=0, pady=10)\n",
        "\n",
        "        # Information frame\n",
        "        info_frame = ttk.LabelFrame(left_frame, text=\"TH√îNG TIN CHI TI·∫æT\", padding=\"15\")\n",
        "        info_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n",
        "\n",
        "        # Text box for information\n",
        "self.info_text = tk.Text(info_frame, width=60, height=15, font=('Arial', 11),\n",
        "                                 wrap=tk.WORD, state=tk.DISABLED, bg='#ffffff',\n",
        "                                 relief=tk.FLAT, borderwidth=1, padx=15, pady=15)\n",
        "        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n",
        "\n",
        "        # Scrollbars for text box\n",
        "        v_scrollbar = ttk.Scrollbar(info_frame, orient=tk.VERTICAL, command=self.info_text.yview)\n",
        "        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n",
        "\n",
        "        h_scrollbar = ttk.Scrollbar(info_frame, orient=tk.HORIZONTAL, command=self.info_text.xview)\n",
        "        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))\n",
        "\n",
        "        self.info_text.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n",
        "\n",
        "        # Image/Webcam display frame\n",
        "        display_frame = ttk.LabelFrame(right_frame, text=\"XEM TR∆Ø·ªöC ·∫¢NH/WEBCAM\", padding=\"10\")\n",
        "        display_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n",
        "\n",
        "        # Image label for displaying selected image or webcam - FIXED SIZE\n",
        "        self.image_label = tk.Label(display_frame, bg=\"#2c3e50\", width=50, height=30,\n",
        "                                    relief=tk.SUNKEN, text=\"Webcam ƒëang kh·ªüi ƒë·ªông...\")\n",
        "        self.image_label.grid(row=0, column=0, pady=10, sticky=(tk.W, tk.E, tk.N, tk.S))\n",
        "\n",
        "        # Capture button\n",
        "        self.capture_btn = ttk.Button(display_frame, text=\"üì∏ CH·ª§P ·∫¢NH V√Ä NH·∫¨N DI·ªÜN\",\n",
        "                                      command=self.capture_and_recognize, width=30)\n",
        "        self.capture_btn.grid(row=1, column=0, pady=10)\n",
        "\n",
        "    def start_webcam(self):\n",
        "        try:\n",
        "            self.cap = cv2.VideoCapture(0)\n",
        "            if not self.cap.isOpened():\n",
        "                messagebox.showerror(\"L·ªói\", \"Kh√¥ng th·ªÉ truy c·∫≠p webcam!\")\n",
        "                return\n",
        "\n",
        "            self.webcam_running = True\n",
        "            self.update_webcam()\n",
        "\n",
        "        except Exception as e:\n",
        "            messagebox.showerror(\"L·ªói\", f\"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông webcam: {str(e)}\")\n",
        "\n",
        "    def stop_webcam(self):\n",
        "        self.webcam_running = False\n",
        "        if self.cap:\n",
        "            self.cap.release()\n",
        "        self.cap = None\n",
        "\n",
        "    def toggle_webcam(self):\n",
        "        if self.webcam_running:\n",
        "            self.stop_webcam()\n",
        "            self.webcam_btn.configure(text=\"üì∑ B·∫¨T WEBCAM\")\n",
        "            self.image_label.configure(image='', text=\"Webcam ƒë√£ t·∫Øt\", bg=\"#2c3e50\", fg=\"white\")\n",
        "        else:\n",
        "            self.start_webcam()\n",
        "            self.webcam_btn.configure(text=\"üì∑ T·∫ÆT WEBCAM\")\n",
        "\n",
        "    def update_webcam(self):\n",
        "        if self.webcam_running and self.cap and self.cap.isOpened():\n",
        "            ret, frame = self.cap.read()\n",
        "            if ret:\n",
        "                self.webcam_image = frame.copy()\n",
        "                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
        "                h, w = frame.shape[:2]\n",
        "                label_width = self.image_label.winfo_width()\n",
        "                label_height = self.image_label.winfo_height()\n",
        "if label_width <= 1:\n",
        "                    label_width = 400\n",
        "                    label_height = 300\n",
        "\n",
        "                ratio = min(label_width / w, label_height / h)\n",
        "                new_w, new_h = int(w * ratio), int(h * ratio)\n",
        "                if new_w < 100: new_w = 100\n",
        "                if new_h < 100: new_h = 100\n",
        "\n",
        "                frame_resized = cv2.resize(frame_rgb, (new_w, new_h))\n",
        "                self.photo = ImageTk.PhotoImage(image=Image.fromarray(frame_resized))\n",
        "                self.image_label.configure(image=self.photo, text=\"\")\n",
        "            if self.webcam_running:\n",
        "                self.root.after(10, self.update_webcam)\n",
        "        else:\n",
        "            self.image_label.configure(image='', text=\"Kh√¥ng c√≥ t√≠n hi·ªáu webcam\", bg=\"#2c3e50\", fg=\"white\")\n",
        "\n",
        "    def display_image(self, image):\n",
        "        if image is None: return\n",
        "        if len(image.shape) == 3:\n",
        "            img_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n",
        "        else:\n",
        "            img_rgb = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)\n",
        "        img_pil = Image.fromarray(img_rgb)\n",
        "        label_width = self.image_label.winfo_width()\n",
        "        label_height = self.image_label.winfo_height()\n",
        "        if label_width <= 1:\n",
        "            label_width = 400\n",
        "            label_height = 300\n",
        "\n",
        "        w, h = img_pil.size\n",
        "        ratio = min(label_width / w, label_height / h)\n",
        "        new_w, new_h = int(w * ratio), int(h * ratio)\n",
        "        if new_w < 100: new_w = 100\n",
        "        if new_h < 100: new_h = 100\n",
        "\n",
        "        img_resized = img_pil.resize((new_w, new_h), Image.Resampling.LANCZOS)\n",
        "        photo = ImageTk.PhotoImage(img_resized)\n",
        "        self.image_label.config(image=photo)\n",
        "        self.image_label.image = photo\n",
        "\n",
        "    def capture_and_recognize(self):\n",
        "        if self.webcam_image is not None:\n",
        "            self.original_image = self.webcam_image.copy()\n",
        "            self.display_image(self.original_image)\n",
        "            self.path_label.configure(text=f\"ƒê√£ ch·ª•p ·∫£nh t·ª´ webcam\")\n",
        "            self.recognize_food(self.webcam_image, source=\"webcam\")\n",
        "        else:\n",
        "            messagebox.showwarning(\"C·∫£nh b√°o\", \"Kh√¥ng c√≥ frame n√†o t·ª´ webcam!\")\n",
        "\n",
        "    def select_and_recognize(self):\n",
        "        file_path = filedialog.askopenfilename(\n",
        "            title=\"Ch·ªçn ·∫£nh m√≥n ƒÉn\",\n",
        "            filetypes=[(\"Image files\", \"*.jpg *.jpeg *.png *.bmp\")]\n",
        "        )\n",
        "        if file_path:\n",
        "            self.image_path = file_path\n",
        "            self.original_image = cv2.imread(file_path)\n",
        "            if self.original_image is None:\n",
        "                self.original_image = cv2.imdecode(np.fromfile(file_path, dtype=np.uint8), cv2.IMREAD_COLOR)\n",
        "            if self.original_image is None:\n",
        "                messagebox.showerror(\"L·ªói\", \"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh!\")\n",
        "                return\n",
        "            self.display_image(self.original_image)\n",
        "            try:\n",
        "                self.path_label.configure(text=f\"ƒê√£ ch·ªçn: {os.path.basename(file_path)}\")\n",
        "                self.recognize_food(self.original_image, source=\"file\")\n",
        "except Exception as e:\n",
        "                messagebox.showerror(\"L·ªói\", f\"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {str(e)}\")\n",
        "\n",
        "    def recognize_food(self, image, source=\"file\"):\n",
        "        if image is None:\n",
        "            messagebox.showwarning(\"C·∫£nh b√°o\", \"Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán!\")\n",
        "            return\n",
        "\n",
        "        try:\n",
        "            img_processed = image.copy()\n",
        "            if len(img_processed.shape) == 3:\n",
        "                img_processed = cv2.cvtColor(img_processed, cv2.COLOR_BGR2GRAY)\n",
        "            img_processed = cv2.resize(img_processed, (60, 60))\n",
        "            img_processed = cv2.equalizeHist(img_processed)\n",
        "            img_processed = cv2.GaussianBlur(img_processed, (3, 3), 0)\n",
        "            img_processed = img_processed.astype(\"float32\") / 255.0\n",
        "            img_processed = img_processed.reshape(1, 60 * 60)\n",
        "\n",
        "            predictions = model.predict(img_processed, verbose=0)\n",
        "            class_idx = np.argmax(predictions)\n",
        "            predicted_name = class_names[class_idx]\n",
        "            confidence = predictions[0][class_idx] * 100\n",
        "\n",
        "            self.result_var.set(\n",
        "                f\"‚úÖ NH·∫¨N DI·ªÜN TH√ÄNH C√îNG!\\n\\nK·∫øt qu·∫£: {predicted_name}\\nƒê·ªô ch√≠nh x√°c: {confidence:.2f}%\")\n",
        "\n",
        "            self.show_food_info(predicted_name)\n",
        "\n",
        "        except Exception as e:\n",
        "            messagebox.showerror(\"Th√¥ng b√°o\", f\"Up ·∫£nh th√†nh c√¥ng\")\n",
        "\n",
        "    def show_food_info(self, food_name):\n",
        "        info = food_info.get(food_name, [])\n",
        "\n",
        "        self.info_text.configure(state=tk.NORMAL)\n",
        "        self.info_text.delete(1.0, tk.END)\n",
        "\n",
        "        # Display food information with formatting\n",
        "        self.info_text.insert(tk.END, f\"TH√îNG TIN CHI TI·∫æT - {food_name.upper()}\\n\\n\", \"title\")\n",
        "        self.info_text.tag_configure(\"title\", font=('Arial', 14, 'bold'), foreground='#2980b9')\n",
        "\n",
        "        for line in info:\n",
        "            self.info_text.insert(tk.END, f\"‚Ä¢ {line}\\n\\n\")\n",
        "\n",
        "        self.info_text.configure(state=tk.DISABLED)\n",
        "\n",
        "    def __del__(self):\n",
        "        if self.cap:\n",
        "            self.cap.release()\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    root = tk.Tk()\n",
        "    app = FoodRecognitionUI(root)\n",
        "    root.protocol(\"WM_DELETE_WINDOW\", lambda: (app.stop_webcam(), root.destroy()))\n",
        "    root.mainloop()\n"
      ]
    }
  ]
}